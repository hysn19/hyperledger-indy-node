[libindy] prepare_result: >>> Ok(())
[libindy] indy_set_logger: <<< res: Success
[example]   main.c: 388 ------------------------------------------------------------------------
[example]   main.c: 389 example start
[example]   main.c: 390 ------------------------------------------------------------------------
[libindy] indy_set_protocol_version: >>> protocol_version: 2
[libindy] indy_set_protocol_version: entities >>> protocol_version: 2
[libindy] prepare_result: >>> Ok(())
[libindy] indy_set_protocol_version: <<< res: Success
[libindy] Worker thread started
[libindy] PoolCommand command received
[libindy] SetProtocolVersion command received
[libindy] set_protocol_version >>> version: 2
[libindy] set_protocol_version <<<
[libindy] prepare_result: >>> Ok(())
[libindy] indy_set_protocol_version:
[example] indy_cb.c: 41 ------------------------------------------------------------------------
[example] indy_cb.c: 42 Command Handle : 0, Error : 0
[example] indy_cb.c: 43 ------------------------------------------------------------------------
[example]   main.c: 398 ------------------------------------------------------------------------
[example]   main.c: 399 set protocol verion success [2]
[example]   main.c: 400 ------------------------------------------------------------------------
[example]   main.c: 406 ------------------------------------------------------------------------
[example]   main.c: 407 pool name  : pool4
[example]   main.c: 408 pool config : { "genesis_txn": "\/tmp\/indy\/pool1.txn" }
[example]   main.c: 409 ------------------------------------------------------------------------
[example]   main.c: 411 ------------------------------------------------------------------------
[example]   main.c: 412 indy_create_pool_ledger_config start
[example]   main.c: 413 ------------------------------------------------------------------------
[libindy] indy_create_pool_ledger_config: >>> config_name: 0x55a0e9265d89, config: 0x55a0eae22e60
[libindy] indy_create_pool_ledger_config: entities >>> config_name: "pool4", config: Some(PoolConfig { genesis_txn: "/tmp/indy/pool1.txn" })
[libindy] prepare_result: >>> Ok(())
[libindy] indy_create_pool_ledger_config: <<< res: Success
[libindy] PoolCommand command received
[libindy] Create command received
[libindy] create >>> name: "pool4", config: Some(PoolConfig { genesis_txn: "/tmp/indy/pool1.txn" })
[libindy] PoolService::create pool4 with config Some(PoolConfig { genesis_txn: "/tmp/indy/pool1.txn" })
[libindy] create << res: ()
[libindy] prepare_result: >>> Ok(())
[libindy] indy_create_pool_ledger_config:
[example] indy_cb.c: 41 ------------------------------------------------------------------------
[example] indy_cb.c: 42 Command Handle : 1, Error : 0
[example] indy_cb.c: 43 ------------------------------------------------------------------------
[example]   main.c: 419 ------------------------------------------------------------------------
[example]   main.c: 420 indy_create_pool_ledger_config success
[example]   main.c: 421 ------------------------------------------------------------------------
[example]   main.c: 423 ------------------------------------------------------------------------
[example]   main.c: 424 indy_open_pool_ledgr start
[example]   main.c: 425 ------------------------------------------------------------------------
[libindy] indy_open_pool_ledger: >>> config_name: 0x55a0e9265d89, config: 0x55a0eae22e60
[libindy] indy_open_pool_ledger: entities >>> config_name: "pool4", config: Some(PoolOpenConfig { timeout: 20, extended_timeout: 60, conn_limit: 5, conn_active_timeout: 5, preordered_nodes: [], number_read_nodes: 2 })
[libindy] prepare_result: >>> Ok(())
[libindy] indy_open_pool_ledger: <<< res: Success
[libindy] PoolCommand command received
[libindy] Open command received
[libindy] open >>> name: "pool4", config: Some(PoolOpenConfig { timeout: 20, extended_timeout: 60, conn_limit: 5, conn_active_timeout: 5, preordered_nodes: [], number_read_nodes: 2 })
[libindy] Pool::new name pool4, id 2, config PoolOpenConfig { timeout: 20, extended_timeout: 60, conn_limit: 5, conn_active_timeout: 5, preordered_nodes: [], number_read_nodes: 2 }
[libindy] open <<<
[libindy] cmd_parts [[99, 111, 110, 110, 101, 99, 116], [2, 0, 0, 0], [255, 255, 255, 255]]
[libindy] received pool event: Some(CheckCache(2))
[libindy] Restoring merkle tree from genesis
[libindy] ZMQNetworker::process_event: nodes_updated [RemoteNode { name: "Node1", public_key: [245, 162, 146, 125, 78, 184, 226, 60, 221, 1, 103, 194, 231, 134, 97, 57, 147, 89, 13, 171, 80, 230, 214, 139, 195, 130, 29, 243, 184, 195, 79, 31], zaddr: "tcp://10.0.0.155:9702", is_blacklisted: false }, RemoteNode { name: "Node2", public_key: [221, 7, 213, 25, 70, 73, 199, 226, 112, 254, 71, 75, 167, 252, 229, 6, 9, 164, 175, 172, 99, 45, 152, 229, 52, 56, 128, 121, 246, 160, 155, 14], zaddr: "tcp://10.0.0.155:9704", is_blacklisted: false }, RemoteNode { name: "Node3", public_key: [79, 5, 67, 174, 174, 29, 149, 231, 155, 21, 224, 85, 146, 120, 150, 148, 59, 245, 158, 37, 83, 26, 154, 135, 77, 138, 28, 147, 175, 47, 27, 119], zaddr: "tcp://10.0.0.155:9706", is_blacklisted: false }, RemoteNode { name: "Node4", public_key: [196, 24, 141, 31, 105, 237, 27, 65, 201, 62, 59, 55, 193, 242, 181, 53, 42, 157, 34, 231, 131, 64, 176, 60, 30, 210, 123, 110, 169, 191, 133, 26], zaddr: "tcp://10.0.0.155:9708", is_blacklisted: false }]
[libindy] start catchup, ne: Some(SendAllRequest("{\"op\":\"LEDGER_STATUS\",\"txnSeqNo\":4,\"merkleRoot\":\"2koSg1fFQWTW9UBbN34xwEN4WJ8ZRKxXget2xRiSGmQy\",\"ledgerId\":0,\"ppSeqNo\":null,\"viewNo\":null,\"protocolVersion\":2}", "2koSg1fFQWTW9UBbN34xwEN4WJ8ZRKxXget2xRiSGmQy", 60, None))
[libindy] sending new request
[libindy] send request in new conn
[libindy] PoolConnection::new: from nodes [RemoteNode { name: "Node1", public_key: [245, 162, 146, 125, 78, 184, 226, 60, 221, 1, 103, 194, 231, 134, 97, 57, 147, 89, 13, 171, 80, 230, 214, 139, 195, 130, 29, 243, 184, 195, 79, 31], zaddr: "tcp://10.0.0.155:9702", is_blacklisted: false }, RemoteNode { name: "Node2", public_key: [221, 7, 213, 25, 70, 73, 199, 226, 112, 254, 71, 75, 167, 252, 229, 6, 9, 164, 175, 172, 99, 45, 152, 229, 52, 56, 128, 121, 246, 160, 155, 14], zaddr: "tcp://10.0.0.155:9704", is_blacklisted: false }, RemoteNode { name: "Node3", public_key: [79, 5, 67, 174, 174, 29, 149, 231, 155, 21, 224, 85, 146, 120, 150, 148, 59, 245, 158, 37, 83, 26, 154, 135, 77, 138, 28, 147, 175, 47, 27, 119], zaddr: "tcp://10.0.0.155:9706", is_blacklisted: false }, RemoteNode { name: "Node4", public_key: [196, 24, 141, 31, 105, 237, 27, 65, 201, 62, 59, 55, 193, 242, 181, 53, 42, 157, 34, 231, 131, 64, 176, 60, 30, 210, 123, 110, 169, 191, 133, 26], zaddr: "tcp://10.0.0.155:9708", is_blacklisted: false }]
[libindy] send_request >> pe: Some(SendAllRequest("{\"op\":\"LEDGER_STATUS\",\"txnSeqNo\":4,\"merkleRoot\":\"2koSg1fFQWTW9UBbN34xwEN4WJ8ZRKxXget2xRiSGmQy\",\"ledgerId\":0,\"ppSeqNo\":null,\"viewNo\":null,\"protocolVersion\":2}", "2koSg1fFQWTW9UBbN34xwEN4WJ8ZRKxXget2xRiSGmQy", 60, None))
[libindy] _send_msg_to_one_node >> idx 0, req_id 2koSg1fFQWTW9UBbN34xwEN4WJ8ZRKxXget2xRiSGmQy, req {"op":"LEDGER_STATUS","txnSeqNo":4,"merkleRoot":"2koSg1fFQWTW9UBbN34xwEN4WJ8ZRKxXget2xRiSGmQy","ledgerId":0,"ppSeqNo":null,"viewNo":null,"protocolVersion":2}
[libindy] _get_socket: open new socket for node 0
[libindy] _send_msg_to_one_node <<
[libindy] _send_msg_to_one_node >> idx 1, req_id 2koSg1fFQWTW9UBbN34xwEN4WJ8ZRKxXget2xRiSGmQy, req {"op":"LEDGER_STATUS","txnSeqNo":4,"merkleRoot":"2koSg1fFQWTW9UBbN34xwEN4WJ8ZRKxXget2xRiSGmQy","ledgerId":0,"ppSeqNo":null,"viewNo":null,"protocolVersion":2}
[libindy] _get_socket: open new socket for node 1
[libindy] _send_msg_to_one_node <<
[libindy] _send_msg_to_one_node >> idx 2, req_id 2koSg1fFQWTW9UBbN34xwEN4WJ8ZRKxXget2xRiSGmQy, req {"op":"LEDGER_STATUS","txnSeqNo":4,"merkleRoot":"2koSg1fFQWTW9UBbN34xwEN4WJ8ZRKxXget2xRiSGmQy","ledgerId":0,"ppSeqNo":null,"viewNo":null,"protocolVersion":2}
[libindy] _get_socket: open new socket for node 2
[libindy] _send_msg_to_one_node <<
[libindy] _send_msg_to_one_node >> idx 3, req_id 2koSg1fFQWTW9UBbN34xwEN4WJ8ZRKxXget2xRiSGmQy, req {"op":"LEDGER_STATUS","txnSeqNo":4,"merkleRoot":"2koSg1fFQWTW9UBbN34xwEN4WJ8ZRKxXget2xRiSGmQy","ledgerId":0,"ppSeqNo":null,"viewNo":null,"protocolVersion":2}
[libindy] _get_socket: open new socket for node 3
[libindy] _send_msg_to_one_node <<
[libindy] send_request <<
[libindy] PoolSM: from init to getting catchup target
[libindy] received pool event: Some(NodeReply("{\"merkleRoot\":\"H6Xnsc74UifcrwrRT5n6VFiBzz8yqYkq8UDM8Ey9c7mG\",\"protocolVersion\":2,\"ledgerId\":0,\"op\":\"LEDGER_STATUS\",\"viewNo\":0,\"txnSeqNo\":4,\"ppSeqNo\":0}", "Node3"))
[libindy] received pool event: Some(NodeReply("{\"protocolVersion\":2,\"txnSeqNo\":4,\"op\":\"LEDGER_STATUS\",\"viewNo\":0,\"ppSeqNo\":0,\"merkleRoot\":\"H6Xnsc74UifcrwrRT5n6VFiBzz8yqYkq8UDM8Ey9c7mG\",\"ledgerId\":0}", "Node2"))
[libindy] PoolSM: from getting catchup target to active
[libindy] PoolSM: from getting catchup target to terminated
[libindy] received pool event: Some(NodeReply("{\"protocolVersion\":2,\"op\":\"LEDGER_STATUS\",\"ppSeqNo\":0,\"merkleRoot\":\"H6Xnsc74UifcrwrRT5n6VFiBzz8yqYkq8UDM8Ey9c7mG\",\"txnSeqNo\":4,\"ledgerId\":0,\"viewNo\":0}", "Node4"))
[libindy] PoolCommand command received
[libindy] OpenAck handle 2, pool_id 2, result Err(IndyError { inner: 
Ledger merkle tree is not acceptable for current tree.
Invalid library state })
[libindy] prepare_result_1: >>> Err(IndyError { inner: 
Ledger merkle tree is not acceptable for current tree.
Invalid library state })
[libindy] indy_open_pool_ledger: pool_handle: 0
[example] indy_cb.c: 52 ------------------------------------------------------------------------
[example] indy_cb.c: 53 Command Handle : 2, Error : 112
[example] indy_cb.c: 54 ------------------------------------------------------------------------